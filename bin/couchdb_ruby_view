#!/usr/local/bin/ruby -wKU

#begin
require 'rubygems'
require 'yajl'

# Highly experimental view requestor for CouchDb
# 
# >> pp RestClient.post("http://127.0.0.1:5984/db/_temp_view", {
#      "language"=>"ruby",
#      "map"=>"proc{|doc| if doc['foo'] =~ /ba/; emit(nil, doc); end}"
#    }.to_json)
#
# Implements subset of protocol described at
# http://wiki.apache.org/couchdb/View_server

map_results = []

# used within the provided proc to add keys/values to the resulting view
class << self; self; end.class_eval do
  define_method(:emit) do |key,value|
    map_results.push [key,value]
  end
end

# used within the provided proc to perform logging
def log(message)
  respond(["log", message])
end

def respond(obj)
  puts Yajl::Encoder.encode(obj)
rescue => e
  puts Yajl::Encoder.encode(["log", "Error converting object to JSON: #{e}"])
ensure
  STDOUT.flush
end

def respond_error(error, reason)
  respond('error' => error, 'reason' => reason)
end

def run_reduce(srcs, ks, vs, rereduce, b)
  fns = srcs.collect { |src|
    begin
      fn = eval(src, b, "reduce", 1)
      raise "expression must respond_to #call" unless fn.respond_to?(:call)
      fn
    rescue StandardError, SyntaxError => e
      respond_error "reduce_compilation_error", "#{e}"
      return
    end
  }
  reductions = fns.collect { |fn|
    begin
      fn.call(ks, vs, rereduce)
    rescue => e
      log "function raised exception (#{e})"
      nil
    end
  }
  respond [true, reductions]
end

callables = []
while cmd = ARGF.gets
#  $stderr.puts "@@@==> got: #{cmd.inspect}"
  cmd = Yajl::Parser.parse(cmd)
  case cmd[0]
  when "reset"
    callables = []
    respond(true)
  when "add_fun"
    # second arg is a string that will compile to a function
    begin
      fn = eval(cmd[1], binding, "map", 1)
      raise "expression must respond_to #call" unless fn.respond_to?(:call)
    rescue StandardError, SyntaxError => e
      respond_error('map_compilation_error', "#{e}")
    else
      callables << fn
      respond(true)
    end
  when "map_doc"
    results = []
    doc = cmd[1]
    doc.freeze
    callables.each do |callable|
      map_results = []
      begin
        callable.call(doc)
        results.push(map_results)
      rescue => e
        log "function raised exception (#{e}) with doc._id #{doc['_id']}"
        results.push([])
      rescue Exception => e
        respond_error('map_runtime_error', "exception raised: #{e}")
        exit(1)
      end
    end
    respond(results)
  when "reduce"
    # Done like this for compatibility with the Javascript view server.
    # In some cases it means the reduce and rereduce functions can be
    # identical. Otherwise: reduce function could each { |(k,id),v| ... }
    ks, vs = cmd[2].transpose
    run_reduce(cmd[1], ks, vs, false, binding)
  when "rereduce"
    run_reduce(cmd[1], nil, cmd[2], true, binding)
  else
    respond_error('query_server_error', "unknown command '#{cmd[0]}'")
    exit(1)
  end
end

#rescue Exception => e
#  File.open("/tmp/couchdb_view.log","a") { |f| f << "#{e}\n\t#{e.backtrace.join("\n\t")}" }
#end
